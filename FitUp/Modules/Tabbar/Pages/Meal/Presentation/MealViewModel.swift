//
//  DietViewModel.swift
//  FitUp
//
//  Created by Kamal Abdullayev on 08.04.25.
//

import Foundation

final class MealViewModel {
    private let userMealsUseCase: UserGetMealsUseCaseProtocol
    
    init(userMealsUseCase: UserGetMealsUseCaseProtocol) {
        self.userMealsUseCase = userMealsUseCase
    }
    
    //    @MainActor
    //    func fetchMeals(
    //        onSuccess: @escaping (TotalMealValuesDTO, NutritionRequirementsDTO) -> Void,
    //        onFailure: @escaping (Error) -> Void
    //    ) async {
    //        do {
    //            let totalMeals = try await userMealsUseCase.userTotalMeal()
    //            let requirements = try await userMealsUseCase.userNutritionRequirements()
    //
    //            print("‚úÖ Meals fetched successfully: \(totalMeals)")
    //            print("‚úÖ Requirements fetched successfully: \(requirements)")
    //            onSuccess(totalMeals, requirements)
    //
    //        } catch {
    //            print("‚ùå Fetching meals/requirements failed: \(error.localizedDescription)")
    //            onFailure(error)
    //        }
    //    }
    @MainActor
    func fetchMealData(for date: Date) async throws -> (totalMeals: TotalMealValuesDTO, requirements: NutritionRequirementsDTO) {
        async let totalMealsTask = userMealsUseCase.usersTotalMeal(for: date)
        async let requirementsTask = userMealsUseCase.userNutritionRequirements()
        
        let totalMeals = try await totalMealsTask
        let requirements = try await requirementsTask
        
        print("üîµ ViewModel.fetchMealData: –ó–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞—Ç—ã: \(date)")
        // –ü–µ—Ä–µ–¥ return
        print("üîµ ViewModel.fetchMealData: –ü–æ–ª—É—á–µ–Ω—ã totalMeals = \(totalMeals), requirements = \(requirements)") // –í–∞–∂–Ω–æ! requirements –±–µ–∑ –¥–∞—Ç—ã!
        return (totalMeals, requirements)
        
    }
}



